#include "ns3/pd-el.h"
#include "ns3/el-ev-helper.h"
#include "ns3/el-pd-helper.h"
#include "ns3/el-esdm-helper.h"
#include "ns3/v2g-event.h"
#include "ns3/ev-app.h"
#include "ns3/pd-app.h"
#include "ns3/core-module.h"
#include "ns3/network-module.h"
#include "ns3/internet-module.h"
#include "ns3/point-to-point-module.h"
using namespace ns3;

int main() {
	/*NodeContainer evs;
	NodeContainer pds;
	NodeContainer esdms;
	evs.Create(4);
	pds.Create(2);
	esdms.Create(1);
	ElEsdmHelper esdmhelper;
	ElPdHelper pdhelper(100, "ESDM_0", 10);
	ElEvHelper evhelper;
	esdmhelper.Install(esdms);
	pdhelper.Install(pds);
	evhelper.Install(evs);
	/////
	/////
	struct ThresholdInfo Threshold0;
	struct ThresholdInfo Threshold1;
	struct ThresholdInfo Threshold2;
	struct ThresholdInfo Threshold5;
	struct ThresholdInfo Threshold6;
	Threshold0.m_relatedDataId=0;
	Threshold0.m_value=2;
    Threshold0.m_indecatetype=true;
	Threshold1.m_relatedDataId=1;
	Threshold1.m_value=2;
	Threshold1.m_indecatetype=true;
	Threshold2.m_relatedDataId=2;
	Threshold2.m_value=6;
    Threshold2.m_indecatetype=false;
	Threshold5.m_relatedDataId=5;
	Threshold5.m_value=3;
	Threshold5.m_indecatetype=false;
	Threshold6.m_relatedDataId=6;
	Threshold6.m_value=2;
	Threshold6.m_indecatetype=false;
	//pds.Get(0)->GetObject<PdEl>()->AddThreshold(&Threshold0);
	//pds.Get(0)->GetObject<PdEl>()->AddThreshold(&Threshold1);
	//pds.Get(0)->GetObject<PdEl>()->AddThreshold(&Threshold2);
	//pds.Get(0)->GetObject<PdEl>()->AddThreshold(&Threshold5);
	//pds.Get(0)->GetObject<PdEl>()->AddThreshold(&Threshold6);
	

	/*evs.Get(0)->GetObject<EvEl>()->StartCharge(4, 4, "PD_0_IF_1");
	evs.Get(1)->GetObject<EvEl>()->StartCharge(8, 12, "PD_0_IF_2");
	evs.Get(2)->GetObject<EvEl>()->StartFeed(4, 8, 4,"PD_0_IF_3");*/

  LogComponentEnable ("EvEl", LOG_LEVEL_DEBUG);

NodeContainer esdms;
esdms.Create(1);
ElEsdmHelper esdmhelper;
esdmhelper.Install(esdms);

  NodeContainer nodes;
  nodes.Create (2);
  NodeContainer pdnodes;
  pdnodes.Create (2);

  PointToPointHelper pointToPoint;
  pointToPoint.SetDeviceAttribute ("DataRate", StringValue ("5Mbps"));
  pointToPoint.SetChannelAttribute ("Delay", StringValue ("2ms"));

  NetDeviceContainer devices;
  devices = pointToPoint.Install (nodes);
  NetDeviceContainer pddevices;
  pddevices = pointToPoint.Install (pdnodes);

  InternetStackHelper stack;
  stack.Install (nodes);
  stack.Install (pdnodes);

  Ipv4AddressHelper address;
  address.SetBase ("10.1.1.0", "255.255.255.0");
  Ipv4InterfaceContainer interfaces = address.Assign (devices);
  address.SetBase ("10.1.2.0", "255.255.255.0");
  Ipv4InterfaceContainer pdinterfaces = address.Assign (pddevices);

ElEvHelper evhelper;
evhelper.Install(nodes);
ElPdHelper pdhelper(100, "ESDM_0", 10);
pdhelper.Install(pdnodes);

	/*pdnodes.Get(0)->GetObject<PdEl>()->AddThreshold(&Threshold0);
	pdnodes.Get(0)->GetObject<PdEl>()->AddThreshold(&Threshold1);
	pdnodes.Get(0)->GetObject<PdEl>()->AddThreshold(&Threshold2);
	pdnodes.Get(0)->GetObject<PdEl>()->AddThreshold(&Threshold5);
	pdnodes.Get(0)->GetObject<PdEl>()->AddThreshold(&Threshold6);*/
Ptr<EvApp> EvApp1 = CreateObject<EvApp>("EV_0");
Ptr<EvApp> EvApp2 = CreateObject<EvApp>("EV_1");
Ptr<PdApp> PdApp1 = CreateObject<PdApp>("PD_0");
Ptr<PdApp> PdApp2 = CreateObject<PdApp>("PD_1");
nodes.Get(0)->AddApplication(EvApp1);
nodes.Get(1)->AddApplication(EvApp2);
pdnodes.Get(0)->AddApplication(PdApp1);
pdnodes.Get(1)->AddApplication(PdApp2);
//PdApp1->Init();
//PdApp2->Init();
EvApp1->SetStartTime(Seconds(1.0));
EvApp2->SetStartTime(Seconds(1.0));
EvApp1->SetStopTime(Seconds(60.0));
EvApp2->SetStopTime(Seconds(60.0));
PdApp1->SetStartTime(Seconds(1.0));
PdApp2->SetStartTime(Seconds(1.0));
PdApp1->SetStopTime(Seconds(60.0));
PdApp2->SetStopTime(Seconds(60.0));
EvApp1->TestEl(Seconds(2.0));
EvApp2->TestEl(Seconds(5.0));
	Simulator::Run();
	Simulator::Destroy();
	return 0;
}
