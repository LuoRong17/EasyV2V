#include "ns3/ev-app.h"
#include "ns3/nstime.h"
#include "string.h"
#include "ns3/command-line.h"
#include "ns3/esdm-app.h"
#include "ns3/agg-app.h"
#include "ns3/ps-app.h"
#include "ns3/pd-app.h"
#include "ns3/simulator.h"
#include "ns3/core-module.h"
#include "ns3/network-module.h"
#include "ns3/internet-module.h"
#include "ns3/point-to-point-module.h"
#include "ns3/v2g-helper.h"
#include "ns3/config-helper.h"
#include <vector>
using namespace ns3;
using namespace std;


int main(int argc,char *argv[])
{
string file_name;

CommandLine cmd;
cmd.AddValue("doc","config document",file_name);
cmd.Parse(argc,argv);

LogComponentEnable ("EvApp", LOG_LEVEL_INFO);
LogComponentEnable ("EvComServer", LOG_LEVEL_DEBUG);
//LogComponentEnable ("likeyou", LOG_LEVEL_DEBUG);
//the following sentence enable the PsRs and PdRs Log Component in the LOG_DEBUG LEVEL
//LogComponentEnable ("PsRs", LOG_LEVEL_DEBUG);
//LogComponentEnable ("PdRs", LOG_LEVEL_DEBUG);

vector<Ptr<EsdmApp> > vecEsdmApp;
vector<Ptr<AggApp> > vecAggApp;
vector<Ptr<PsApp> > vecPsApp;
vector<Ptr<PdApp> > vecPdApp;



EvApp ev1("EV_1"),ev2("EV_2");

//init................
for(vector<Ptr<EsdmApp> >::iterator it  = vecEsdmApp.begin();it != vecEsdmApp.end(); it++)  
	{  
                 (*it)->Init(); 
		 (*it)->TestApp();
        } 

for(vector<Ptr<AggApp> >::iterator it  = vecAggApp.begin();it != vecAggApp.end(); it++)  
	{  
                 (*it)->Init(); 
        } 

for(vector<Ptr<PsApp> >::iterator it  = vecPsApp.begin();it != vecPsApp.end(); it++)  
	{  
                 (*it)->Init(); 
        } 

for(vector<Ptr<PdApp> >::iterator it  = vecPdApp.begin();it != vecPdApp.end(); it++)  
	{  
                 (*it)->Init(); 
        } 

ev1.Init();
ev2.Init();


 /**************************communication config**************************/
	NodeContainer nodes;
  nodes.Create (2);

  PointToPointHelper pointToPoint;
  pointToPoint.SetDeviceAttribute ("DataRate", StringValue ("5Mbps"));
  pointToPoint.SetChannelAttribute ("Delay", StringValue ("2ms"));

  NetDeviceContainer devices;
  devices = pointToPoint.Install (nodes);

  InternetStackHelper stack;
  stack.Install (nodes);

  Ipv4AddressHelper address;
  address.SetBase ("10.1.1.0", "255.255.255.0");

  Ipv4InterfaceContainer interfaces = address.Assign (devices);

  ev1.SetNode(nodes.Get(0));
  ev1.InitLocalAdd(InetSocketAddress (interfaces.GetAddress (0), V2G_PORT));
  nodes.Get(0)->AddApplication(&ev1);
  ev1.AddPeer(ev2.GetAppId(),InetSocketAddress (interfaces.GetAddress (1), V2G_PORT));


  ev2.SetNode(nodes.Get(1));
  ev2.InitLocalAdd(InetSocketAddress (interfaces.GetAddress (1), V2G_PORT));
  nodes.Get(1)->AddApplication(&ev2);
  ev2.AddPeer(ev1.GetAppId(),InetSocketAddress (interfaces.GetAddress (0), V2G_PORT));

  EventId sendEvent = Simulator::Schedule(Seconds (5.0),&EvApp::Send,&ev1,"EV_2");
  sendEvent = Simulator::Schedule(Seconds (7.0),&EvApp::Send,&ev2,"EV_1");


  ev1.SetStartTime(Seconds (2.0));
  ev1.SetStopTime(Seconds (60.0));
  ev2.SetStartTime(Seconds (2.0));
  ev2.SetStopTime(Seconds (60.0));

/////////////////////////////////////////////////////////////////////////////


Simulator::Run();
Simulator::Destroy();

 return 0;
}
